package com.sonu.es.services.impl;

import java.util.Date;
import java.util.UUID;

import org.modelmapper.ModelMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.stereotype.Service;

import com.sonu.es.dtos.ProductDto;
import com.sonu.es.entitites.Category;
import com.sonu.es.entitites.Product;
import com.sonu.es.exceptions.ResourceNotFoundException;
import com.sonu.es.helper.Helper;
import com.sonu.es.payloads.PageableResponse;
import com.sonu.es.repositories.CategoryRepo;
import com.sonu.es.repositories.ProductRepo;
import com.sonu.es.services.ProductService;

@Service
public class  ProductServiceImpl implements ProductService {
	
	@Autowired
	private ProductRepo productRepo;
	
	@Autowired
	private ModelMapper modelMapper;
	
	@Autowired
	private CategoryRepo categoryRepo;

	@Override
	@PreAuthorize("hasRole('ADMIN')")
	public ProductDto create(ProductDto productDto) {
		
		Product product = this.modelMapper.map(productDto, Product.class);
		
		String productId = UUID.randomUUID().toString();
		product.setProductId(productId);
		product.setAddeddate(new Date());
		
		Product savedProduct = this.productRepo.save(product);
		
		return this.modelMapper.map(savedProduct, ProductDto.class);
	}

	@Override
	@PreAuthorize("hasRole('ADMIN')")
	public ProductDto update(ProductDto productDto, String productId) {
		
		Product product = this.productRepo.findById(productId).orElseThrow(() -> new ResourceNotFoundException("product not found"));
		product.setTitle(productDto.getTitle());
		product.setStock(productDto.isStock());
		product.setQuantity(productDto.getQuantity());
		product.setPrice(productDto.getPrice());
		product.setLive(productDto.isLive());
		product.setDiscountedPrice(productDto.getDiscountedPrice());
		product.setDescription(productDto.getDescription());
		
		Product updatedProduct = this.productRepo.save(product);
		
		return this.modelMapper.map(updatedProduct, ProductDto.class);
	}

	@Override
	@PreAuthorize("hasRole('ADMIN')")
	public void delete(String productId) {
		
		Product product = this.productRepo.findById(productId).orElseThrow(() -> new ResourceNotFoundException("product not found"));
         
		this.productRepo.delete(product);
	}

	@Override
	public ProductDto getById(String productId) {
		
		Product product = this.productRepo.findById(productId).orElseThrow(() -> new ResourceNotFoundException("product not found"));
		
		return this.modelMapper.map(product, ProductDto.class);
	}

	@Override
	public PageableResponse<ProductDto> getAll(int pageNumber, int pageSize, String sortBy, String sortDir) {
		
		Sort sort = (sortDir.equalsIgnoreCase("asc")) ? (Sort.by(sortBy).ascending()) : (Sort.by(sortBy).descending());
		Pageable pageable = PageRequest.of(pageNumber, pageSize, sort);
		Page<Product> page = this.productRepo.findAll(pageable);
		PageableResponse<ProductDto> response = Helper.getPageableResponse(page, ProductDto.class);
		
		return response;
	}

	@Override
	public PageableResponse<ProductDto> getAllLive(int pageNumber, int pageSize, String sortBy, String sortDir) {
		
		Sort sort = (sortDir.equalsIgnoreCase("asc")) ? (Sort.by(sortBy).ascending()) : (Sort.by(sortBy).descending());
		Pageable pageable = PageRequest.of(pageNumber, pageSize, sort);
		Page<Product> page = this.productRepo.findByLiveTrue(pageable);
		PageableResponse<ProductDto> response = Helper.getPageableResponse(page, ProductDto.class);
		
		return response;
	}

	@Override
	public PageableResponse<ProductDto> searchByTitle(String SubTitle, int pageNumber, int pageSize, String sortBy,
			String sortDir) {
		
		Sort sort = (sortDir.equalsIgnoreCase("asc")) ? (Sort.by(sortBy).ascending()) : (Sort.by(sortBy).descending());
		Pageable pageable = PageRequest.of(pageNumber, pageSize, sort);
		Page<Product> page = this.productRepo.findByTitleContaining(SubTitle, pageable);
		PageableResponse<ProductDto> response = Helper.getPageableResponse(page, ProductDto.class);
		
		return response;
	}

	@Override
	public ProductDto createWithCategory(ProductDto productDto, String categoryId) {
		
		Category category = this.categoryRepo.findById(categoryId).orElseThrow(() -> new ResourceNotFoundException("Category not found"));
		
		Product product = this.modelMapper.map(productDto, Product.class);
		String productId = UUID.randomUUID().toString();
		product.setProductId(productId);
		product.setAddeddate(new Date());
		product.setCategory(category);
		
		Product savedProduct = this.productRepo.save(product);
		
		return this.modelMapper.map(savedProduct, ProductDto.class);
	}

	@Override
	public ProductDto updateProductWithCategory(String categoryId, String productId) {
		
		Category category =  this.categoryRepo.findById(categoryId).orElseThrow(() -> new ResourceNotFoundException("category not found"));
		Product product = this.productRepo.findById(productId).orElseThrow(() -> new ResourceNotFoundException("product not found"));
		
		product.setCategory(category);
		Product updatedProduct = this.productRepo.save(product);
		
		return this.modelMapper.map(updatedProduct, ProductDto.class);
	}

	@Override
	public PageableResponse<ProductDto> getAllProductWithCategoryId(String categoryId, int pageNumber, int pageSize, String sortBy, String sortDir) {
		
		Category category =  this.categoryRepo.findById(categoryId).orElseThrow(() -> new ResourceNotFoundException("category not found"));
		
		Sort sort = (sortDir.equalsIgnoreCase("asc")) ? (Sort.by(sortBy).ascending()) : (Sort.by(sortBy).descending());
		Pageable pageable = PageRequest.of(pageNumber, pageSize, sort);
	    Page<Product> page = this.productRepo.findByCategory(category, pageable);
	    
		return Helper.getPageableResponse(page, ProductDto.class);
	}

}

package com.sonu.es.services.impl;

import java.util.List;
import java.util.Optional;
import java.util.UUID;

import org.modelmapper.ModelMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.stereotype.Service;

import com.sonu.es.dtos.CategoryDto;
import com.sonu.es.entitites.Category;
import com.sonu.es.exceptions.ResourceNotFoundException;
import com.sonu.es.helper.Helper;
import com.sonu.es.payloads.PageableResponse;
import com.sonu.es.repositories.CategoryRepo;
import com.sonu.es.services.CategoryService;

@Service
public class CategoryServiceImpl implements CategoryService {
	
	@Autowired
	private CategoryRepo categoryRepo;
	@Autowired
	private ModelMapper modelMapper;

	@Override
	public CategoryDto create(CategoryDto categoryDto) {
		
		// generate random category ID
		String categoryId = UUID.randomUUID().toString();
		categoryDto.setCategoryId(categoryId);
		
		Category category = this.modelMapper.map(categoryDto, Category.class);
		Category savedCategory = this.categoryRepo.save(category);
		
		return this.modelMapper.map(savedCategory, CategoryDto.class);
	}

	@Override
	public CategoryDto update(CategoryDto categoryDto, String categoryId) {
		
		Optional<Category> categoryOptional = this.categoryRepo.findById(categoryId);
		Category category = categoryOptional.orElseThrow(() -> new ResourceNotFoundException("Category not found"));
		
		category.setTitle(categoryDto.getTitle());
		category.setDescription(categoryDto.getDescription());
		category.setCoverImage(categoryDto.getCoverImage());
		
		// save the category
		Category updatedCategory = this.categoryRepo.save(category);
		return this.modelMapper.map(updatedCategory, CategoryDto.class);
	}

	@Override
	public PageableResponse<CategoryDto> getAll(int pageNumber, int pageSize, String sortBy, String sortDir) {
		
		Sort sort = (sortDir.equalsIgnoreCase("desc")) ? (Sort.by(sortBy).descending()) : (Sort.by(sortBy).ascending());
		
		Pageable pageable = PageRequest.of(pageNumber, pageSize, sort);
		Page<Category> page = this.categoryRepo.findAll(pageable);
		PageableResponse<CategoryDto> response =  Helper.getPageableResponse(page, CategoryDto.class);
		return response;
	}

	@Override
	public CategoryDto getById(String categoryId) {
		
		Category category = this.categoryRepo.findById(categoryId).orElseThrow(() -> new ResourceNotFoundException("category not found"));
		return this.modelMapper.map(category, CategoryDto.class);
	}

	@Override
	public List<CategoryDto> search(String keyword) {
		
		return null;
	}

	@Override
	public void delete(String categoryId) {
		
		Category category = this.categoryRepo.findById(categoryId).orElseThrow(() -> new ResourceNotFoundException("category not found"));
		this.categoryRepo.delete(category);
	}

}


